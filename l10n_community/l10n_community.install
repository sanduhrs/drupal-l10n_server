<?php
/**
 * @file
 *   Localization community installation, update and uninstallation.
 */

/**
 * Implementation of hook_install().
 *
 * - We have a list of projects running with a unique short name
 *   each to identify them nicely in paths.
 * - Then each project has releases, for which we need to store
 *   download links. And to optimize downloads, we need to take
 *   care of when did we process something and what was the hash
 *   of the file. If these differ, we need to download it again.
 *
 * - When files of a release are parsed, we find errors in them,
 *   which need to be stored for later examination (inform developers,
 *   use for project metrics, use to fix extractor bugs). Although
 *   we find errors in the release files, we store error notes on
 *   a release level, to make them easily accessible without the
 *   need for extraneous detail. 
 * - Each project release has multiple files (eg. a module has an .info
 *   file and a .module file at least), which are parsed for translatables.
 *   CVS revision information from files, as well as their name and paths
 *   are stored, so we know where strings are used.
 * - We also store location of strings on the line granularity level.
 *   If the same string is used multiple times on the same line, then we
 *   only store one occassion.
 *
 * - Finally we reach the actual translatables, which are the strings.
 *   For strings with multiple plural versions, we store them as the
 *   same translatable with a \0 separator (unlike Drupal itself), 
 *   because it is easier to match translations with them (for
 *   multiple plural versions) this way, and we can force people to 
 *   translate both at once.
 *
 * The translation table stores two things:
 *  - translations: is_suggestion = 0, *_approved is filled
 *  - suggestions:  is_suggestion = 1, *_approved should be 0
 *
 * Translations have the has_suggestion flag, which is cached information of
 * whether there is at least one is_active is_suggestion record for the same sid
 * and language. 
 * 
 * Both translations and suggestions can be outdated (is_active = 0):
 *  - in case of translations, when newer translation was added
 *  - in case of suggestions, an admin choose a suggestion (or added a 
 *    new translation), and this was not that one, so the action marks
 *    the previous suggestions inactive (ie. they are supposed to be 
 *    reviewed and refused)
 *
 * Unprocessed suggestions and active translations have is_active = 1.
 */
function l10n_community_install() {
  $table_config = "";
  $serial = "SERIAL";
  switch ($GLOBALS["db_type"]) {
    case "mysql":
    case "mysqli":
      $table_config = " /*!40100 DEFAULT CHARACTER SET utf8 */";
      $serial = "INTEGER       NOT NULL AUTO_INCREMENT";
      // Intentionally no break here.
    case "pgsql":
       db_query("CREATE TABLE {l10n_community_project} (
        pid                $serial      PRIMARY KEY,
        uri                VARCHAR(50)  NOT NULL,
        title              VARCHAR(128) NOT NULL,
        home_link          TEXT         NOT NULL,
        last_parsed        INTEGER
        ) $table_config;");
      db_query("CREATE TABLE {l10n_community_release} (
        rid                $serial      PRIMARY KEY,
        pid                INTEGER,
        title              VARCHAR(128) NOT NULL,
        download_link      TEXT         NOT NULL,
        file_date          INTEGER,
        file_hash          VARCHAR(32),
        last_parsed        INTEGER
        ) $table_config;");

      db_query("CREATE TABLE {l10n_community_error} (
        eid                $serial      PRIMARY KEY,
        rid                INTEGER,
        value              TEXT         NOT NULL
        ) $table_config;");
      db_query("CREATE TABLE {l10n_community_file} (
        fid                $serial      PRIMARY KEY,
        rid                INTEGER,
        location           VARCHAR(255) NOT NULL,
        revision           VARCHAR(255) NOT NULL
        ) $table_config;");
      db_query("CREATE TABLE {l10n_community_line} (
        fid                INTEGER,
        lineno             INTEGER,
        type               INTEGER,
        sid                INTEGER
        ) $table_config;");

      db_query("CREATE TABLE {l10n_community_string} (
        sid                $serial      PRIMARY KEY,
        value              TEXT         NOT NULL
        ) $table_config;");
      
      db_query("CREATE TABLE {l10n_community_translation} (
        tid            $serial       PRIMARY KEY,
        sid            INTEGER       NOT NULL,
        language       VARCHAR(12)   NOT NULL,
        translation    TEXT          NOT NULL,
        
        uid_entered    INTEGER       NOT NULL DEFAULT 0,
        uid_approved   INTEGER       NOT NULL DEFAULT 0,
        time_entered   INTEGER       NOT NULL DEFAULT 0,
        time_approved  INTEGER       NOT NULL DEFAULT 0,
        
        has_suggestion INTEGER       NOT NULL DEFAULT 0,
        is_suggestion  INTEGER       NOT NULL DEFAULT 0,
        is_active      INTEGER       NOT NULL DEFAULT 0
        ) $table_config;");

      db_query("ALTER TABLE  {l10n_community_release}  ADD FOREIGN KEY (pid) REFERENCES {l10n_community_project} (pid);");
      db_query("ALTER TABLE  {l10n_community_error}    ADD FOREIGN KEY (rid) REFERENCES {l10n_community_release} (rid);");
      db_query("ALTER TABLE  {l10n_community_file}    ADD FOREIGN KEY (rid) REFERENCES {l10n_community_release} (rid);");
      db_query("ALTER TABLE  {l10n_community_line}     ADD FOREIGN KEY (fid) REFERENCES {l10n_community_file} (fid);");
      db_query("ALTER TABLE  {l10n_community_line}     ADD FOREIGN KEY (sid) REFERENCES {l10n_community_string} (sid);");
      db_query("CREATE INDEX {l10n_community_project}_uri         ON {l10n_community_project} (uri);");

      db_query("ALTER TABLE  {l10n_community_translation} ADD FOREIGN KEY (sid) REFERENCES {l10n_community_string} (sid);");
      db_query("CREATE INDEX {l10n_community_translation}_language ON {l10n_community_translation} (language);");
      db_query("CREATE INDEX {l10n_community_translation}_is_suggestion ON {l10n_community_translation} (is_suggestion);");
      db_query("CREATE INDEX {l10n_community_translation}_is_active ON {l10n_community_translation} (is_active);");
      break;
  }
}

/**
 * Add home_link column so we can interlink projects with drupal.org pages.
 *
 * The uri is not enough as with local projects, we should not automatically
 * link to http://drupal.org/project/$uri.
 */
function l10n_community_update_5000() {
  $ret = array();
  $ret[] = update_sql('ALTER TABLE {l10n_community_project} ADD home_link TEXT NOT NULL AFTER title');
  return $ret;
}

/**
 * Add DEFAULT 0 to integer fields we not always fill in.
 */
function l10n_community_update_5001() {
  $default_to_zero = array('uid_entered', 'uid_approved', 'time_entered', 'time_approved', 'has_suggestion', 'is_suggestion', 'is_active');  
  $ret = array();
  foreach ($default_to_zero as $column) {
    $ret[] = update_sql('ALTER TABLE {l10n_community_translation} CHANGE '. $column .' '. $column .' INTEGER NOT NULL DEFAULT 0');
  }
  return $ret;
}

/**
 * Add type column to lines, so we can track installer and non-installer
 * string usage separately.
 */
function l10n_community_update_5002() {
  $ret = array();
  $ret[] = update_sql('ALTER TABLE {l10n_community_line} ADD type INTEGER AFTER lineno');
  drupal_set_message('An update was executed to support installer string identification in scanned projects. You need to rescan all your prjects to make this work as expected. Delete data from the project, release, file, error and line tables, and rescan all projects. Make sure to leave the source string and translation tables intact. It is always a good idea to make backups!');
  return $ret;
}

/**
 * Clean up starting and trailing spaces and new lines in translations.
 */
function l10n_community_update_5003() {
  $ret = array();
  // We just search for strings that begin or end with these characters.
  foreach (array('\n', ' ') as $char) {
    $result = db_query("SELECT s.sid, s.value, t.tid, t.translation FROM {l10n_community_string} s INNER JOIN {l10n_community_translation} t ON s.sid = t.sid WHERE s.value LIKE '%s%%' OR  s.value LIKE '%%%s' OR t.translation LIKE '%s%%' OR t.translation LIKE '%%%s'", $char, $char, $char, $char);
    while ($string = db_fetch_object($result)) {
      if ($string->translation) {
        $trimmed = l10n_community_trim($string->translation, $string->value);
        if ($trimmed != $string->translation) {
          db_query("UPDATE {l10n_community_translation} SET translation = '%s' WHERE tid = %d", $trimmed, $string->tid);
          drupal_set_message("Fixed string $string->sid: ". check_plain(substr($string->translation, 0, 50)));
        }
      }
    }
  }
  return $ret;
}

/**
 * Implementation of hook_uninstall().
 */
function l10n_community_uninstall() {
  db_query("DROP TABLE {l10n_community_project}");
  db_query("DROP TABLE {l10n_community_release}");
  db_query("DROP TABLE {l10n_community_error}");
  db_query("DROP TABLE {l10n_community_file}");
  db_query("DROP TABLE {l10n_community_line}");
  db_query("DROP TABLE {l10n_community_string}");
  db_query("DROP TABLE {l10n_community_translation}");
}
