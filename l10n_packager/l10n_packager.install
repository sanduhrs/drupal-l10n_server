<?php

/**
 * @file
 *   Localization packager for localization server installer.
 */

/**
 * Implements hook_schema().
 */
function l10n_packager_schema() {
  $schema['l10n_packager_release'] = [
    'description' => 'Information about packaging for each release.',
    'fields' => [
      'rid' => [
        'description' => 'Reference to {l10n_server_release}.rid',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ],
      'status' => [
        'description' => 'Packaging status for this release. One of L10N_PACKAGER_DISABLED, L10N_PACKAGER_ACTIVE and L10N_PACKAGER_ERROR.',
        'type' => 'int',
        'not null' => TRUE,
        'default value' => 1,
      ],
      'checked' => [
        'description' => 'Unix timestamp of last time this release was checked.',
        'type' => 'int',
        'not null' => FALSE,
      ],
      'updated' => [
        'description' => 'Unix timestamp of last time files for this release were updated.',
        'type' => 'int',
        'not null' => FALSE,
      ],
    ],
    'primary key' => ['rid'],
  ];
  $schema['l10n_packager_file'] = [
    'description' => 'Links releases and languages to files.',
    'fields' => [
      'drid' => [
        'description' => 'Internal numeric identifier for a release file.',
        'type' => 'serial',
        'not null' => TRUE,
      ],
      'rid' => [
        'description' => 'Reference to {l10n_server_release}.rid',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ],
      'language' => [
        'description' => 'Reference to the {languages}.language for the translation package.',
        'type' => 'varchar',
        'length' => '12',
        'not null' => TRUE,
      ],
      'fid' => [
        'description' => 'Reference to {file_managed}.fid.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ],
      'checked' => [
        'description' => 'Unix timestamp of last time translation for this language was checked.',
        'type' => 'int',
        'not null' => FALSE,
      ],
      'sid_count' => [
        'description' => 'Count of source strings exported in this file.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
    ],
    'indexes' => [
      'rid' => ['rid'],
    ],
    'primary key' => ['drid'],
  ];
//  $schema['cache_l10n_packager'] = drupal_get_schema_unprocessed('system', 'cache');
//  $schema['cache_l10n_packager']['description'] = 'Cache table for localization packager containing processed status data keyed by project URI.';
  return $schema;
}

/**
 * Implements hook_install().
 */
function l10n_packager_install() {
  // Set up blocks for this module.
//  $theme_key = variable_get('theme_default', 'bartik');
//  $blocks = array(-8 => 'download');
//  $module = 'l10n_packager';
//  foreach ($blocks as $weight => $delta) {
//    // Insert or update all instances of this block even if we just added it.
//    db_merge('block')
//      ->key(array(
//          'module' => $module,
//          'delta'  => $delta,
//        ))
//      ->insertFields(array(
//          'module' => $module,
//          'delta'  => $delta,
//          'cache'  => -1,
//          'status' => 1,
//          'weight' => $weight,
//          'region' => 'sidebar_second',
//          'theme'  => $theme_key,
//          'pages'  => '',
//        ))
//      ->updateFields(array(
//          'cache'  => -1,
//          'status' => 1,
//          'weight' => $weight,
//        ))
//      ->execute();
//  }
}

/**
 * Implements hook_update_last_removed().
 */
function l10n_packager_update_last_removed() {
  return 6004;
}

/**
 * Migrate packaged translation files to D7 managed files.
 */
function l10n_packager_update_7000(&$sandbox) {
  // Killswitch as localize.drupal.org implements this in its own hook.
  if (variable_get('l10n_packager_skip_update_7000', FALSE)) {
    variable_del('l10n_packager_skip_update_7000');
    return NULL;
  }

  // Remove existing stale packages.
  if (!variable_get('l10n_packager_update_7000_inprogress', false)) {
    db_delete('file_managed')
      ->condition('uid', 0)
      ->execute();
    db_delete('file_usage')
      ->condition('module', 'l10n_packager')
      ->execute();
    variable_set('l10n_packager_update_7000_inprogress', true);
  }

  $fid = variable_get('l10n_packager_update_7000_fid', -1);
  if (!isset($sandbox['progress'])) {
    // Delete stale rows from {upload} where the fid is not in the {files} table.
    db_delete('l10n_packager_file')
      ->notExists(
        db_select('files', 'f')
        ->fields('f', array('fid'))
        ->where('f.fid = {l10n_packager_file}.fid')
      )
      ->execute();
    // Initialize batch update information.
    $sandbox['progress'] = variable_get('l10n_packager_update_7000_progress', 0);
    $sandbox['last_fid_processed'] = $fid;
    $sandbox['max'] = db_query("SELECT COUNT(*) FROM {l10n_packager_file}")->fetchField();
  }

  $basename = variable_get('file_directory_path', conf_path() . '/files');
  $scheme = file_default_scheme() . '://';

  // Determine vids for this batch.
  // Process all files attached to a given revision during the same batch.
  $limit = variable_get('l10n_packager_update_7000_batch_size', 5000);
  $count = 0;

  $query = db_select('files', 'fi');
  $query->join('l10n_packager_file', 'pf', 'fi.fid = pf.fid');
  $query->fields('fi', array('fid', 'uid', 'filename', 'filepath', 'filemime', 'filesize', 'status', 'timestamp'))
    ->fields('pf', array('drid'))
    ->condition('fi.fid', $sandbox['last_fid_processed'], '>')
    ->orderBy('fi.fid', 'ASC')
    ->range($count, $limit);
  $result = $query->execute();

  while($file = $result->fetchAssoc()) {
    // We will convert filepaths to URI using the default scheme
    // and stripping off the existing file directory path.
    $file['uri'] = $scheme . preg_replace('!^' . preg_quote($basename) . '!', '', $file['filepath']);
    // Normalize the URI but don't call file_stream_wrapper_uri_normalize()
    // directly, since that is a higher-level API function which invokes
    // hooks while validating the scheme, and those will not work during
    // the upgrade. Instead, use a simpler version that just assumes the
    // scheme from above is already valid.
    if (($file_uri_scheme = file_uri_scheme($file['uri'])) && ($file_uri_target = file_uri_target($file['uri']))) {
      $file['uri'] = $file_uri_scheme . '://' . $file_uri_target;
    }
    unset($file['filepath']);
    // Insert into the file_managed table.
    // Each fid and uri should only be stored once in file_managed.
    try {
      db_insert('file_managed')
        ->fields(array(
          'fid' => $file['fid'],
          'uid' => $file['uid'],
          'filename' => $file['filename'],
          'uri' => $file['uri'],
          'filemime' => $file['filemime'],
          'filesize' => $file['filesize'],
          'status' => $file['status'],
          'timestamp' => $file['timestamp'],
        ))
        ->execute();

        // Add the usage entry for the file.
        $file = (object) $file;
        file_usage_add($file, 'l10n_packager', 'l10n_package', $file->drid);
    }
    catch (PDOException $e) {
      $file = (object) $file;
    }
    $fid = $file->fid;
    $count++;
  }

  $sandbox['last_fid_processed'] = $fid;
  variable_set('l10n_packager_update_7000_fid', $fid);

  // If less than limit node revisions were processed, the update process is
  // finished.
  if ($count < $limit) {
    $finished = TRUE;
  }
  // Update our progress information for the batch update.
  $sandbox['progress'] += $count;
  variable_set('l10n_packager_update_7000_progress', $sandbox['progress']);

  // If there's no max value then there's nothing to update and we're finished.
  if (empty($sandbox['max']) || isset($finished)) {
    variable_del('l10n_packager_update_7000_inprogress');
    variable_del('l10n_packager_update_7000_progress');
    variable_del('l10n_packager_update_7000_fid');

    // Remove stale file duplicates from the l10n_packager_file table.
    db_delete('l10n_packager_file')
      ->notExists(
        db_select('file_managed', 'f')
        ->fields('f', array('fid'))
        ->where('f.fid = {l10n_packager_file}.fid')
      )
      ->execute();
    return t('Translation files have been successfully migrated.');
  }
  else {
    // Indicate our current progress to the batch update system.
    $sandbox['#finished'] = $sandbox['progress'] / $sandbox['max'];
    if (function_exists('drush_log')) {
      drush_log("Processed " . $sandbox['progress'] . " of " . $sandbox['max'] . "(" . $sandbox['#finished'] . "%)");
    }
  }
}
