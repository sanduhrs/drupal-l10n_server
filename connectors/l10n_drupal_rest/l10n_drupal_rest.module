<?php

/**
 * @file
 *   Localization server for Drupal using REST API.
 */

use Drupal\l10n_server\Entity\Release;

/**
 * Implements hook_cron().
 *
 * @todo queue API?
 */
function l10n_drupal_rest_cron() {
  /** @var \Drupal\l10n_drupal_rest\Plugin\l10n_server\Connector\DrupalRest $connector */
  $connector = \Drupal::service('plugin.manager.l10n_server.connector')
    ->createInstance('drupal_rest:restapi', []);
  /** @var Drupal\l10n_server\Plugin\l10n_server\Source\RestApi $source */
  $source = \Drupal::service('plugin.manager.l10n_server.source')
    ->createInstance('restapi', []);

  if ($connector->isEnabled()
      // @todo Settings from REST API configuration form is not available here.
      && $source->isCronEnabled()) {

    $success = $offset = $failed = 0;
    $goal = $source->getScanLimit();
    $connector->refreshProjectList($source);

    do {
      // Pick the oldest releases we did not parse yet.
      $query = \Drupal::database()
        ->select('l10n_server_release', 'sr');
      $query
        ->join('l10n_server_project', 'sp');
      $query
        ->fields('sr', ['rid'])
        ->condition('sp.connector_module', ['l10n_drupal_rest_restapi'], 'IN')
        ->condition('sp.enabled', 1)
        ->condition('sr.download_link', '', '<>')
        ->condition('sr.last_parsed', 0)
        // @todo Adding this forces mysql to create large temporary tables.
        // ->orderBy('sr.file_date')
        ->range($offset, $goal - $success);
      $result = $query->execute();

      foreach ($result as $record) {
        $release = Release::load($record->rid);
        if ($connector->drupalOrgParseRelease($release)) {
          $success++;
        }
        else {
          $failed++;
        }
        $offset++;
      }
    } while ($success < $goal && $query->countQuery()->execute()->fetchField() > 0);

    \Drupal::logger('l10n_drupal')
      ->notice('Parsed @success releases successfully, @fails failed parsing.', [
        '@success' => $success,
        '@fails'   => $failed,
      ]);
  }
}

/**
 * Implementation of hook_l10n_packager_done().
 */
function l10n_drupal_rest_l10n_packager_done($file) {
  // @todo drupalorg_crosssite is currently ported, this might become a service
  //   https://git.drupalcode.org/project/drupalorg_crosssite/-/tree/1.x
  if (function_exists('drupalorg_crosssite_fastly_purge_url')) {
    $download_base = variable_get('l10n_packager_update_url', file_create_url(l10n_packager_directory()));
    $file_path = preg_replace('%^' . preg_quote(l10n_packager_directory(), '%') . '%', '', $file->uri);
    drupalorg_crosssite_fastly_purge_url($download_base . $file_path);

    // “all” is an alias for “8.x”, clear it too, if applicable.
    $alternate_file_path = preg_replace('%^/8\.x%', '/all', $file_path);
    if ($alternate_file_path !== $file_path) {
      drupalorg_crosssite_fastly_purge_url($download_base . $alternate_file_path);
    }
    // And vice versa, for core only.
    $alternate_file_path = preg_replace('%^/all/drupal/%', '/8.x/drupal/', $file_path);
    if ($alternate_file_path !== $file_path) {
      drupalorg_crosssite_fastly_purge_url($download_base . $alternate_file_path);
    }
  }
}
