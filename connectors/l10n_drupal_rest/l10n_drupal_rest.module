<?php

/**
 * @file
 *   Localization server for Drupal using REST API.
 */

/**
 * Constants.
 *
 * @todo move to source plugin?
 */
const L10N_DRUPAL_REST_REFRESH_URL = 'https://www.drupal.org/files/releases.tsv';

/**
 * Implements hook_menu().
 */
function l10n_drupal_rest_menu() {
  $items = array();

  $items['translate/drupal_core'] = array(
    'title' => 'Drupal core translation status',
    'page callback' => 'l10n_drupal_rest_drupal_core_status',
    'file' => 'l10n_drupal_rest.drupal_core.inc',
    'access arguments' => array('access localization community'),
  );
  return $items;
}

/**
 * Implements hook_cron().
 *
 * @todo queue API?
 */
function l10n_drupal_rest_cron() {
  $connector = \Drupal::service('plugin.manager.l10n_server.connector')
    ->createInstance('drupal_rest', []);
  $source = \Drupal::service('plugin.manager.l10n_server.source')
    ->createInstance('restapi', []);

  if ($connector->isEnabled() && $source->isCronEnabled()) {
    $success = $offset = $failed = 0;
    $goal = $source->getScanLimit();

    $connector->refreshProjectList($source);

    do {
      // Pick the oldest releases we did not parse yet.
      $release_ids = \Drupal::entityQuery('l10n_server_release')
        ->condition('pid.entity.connector_module', ['drupal', 'drupal_rest'])
        ->condition('pid.entity.enabled', 1)
        ->condition('download_link', '', '<>')
        ->condition('last_parsed', 0)
        ->sort('file_date')
        ->range($offset, $goal - $success)
        ->execute();

      $releases = \Drupal::entityTypeManager()
        ->getStorage('l10n_server_release')
        ->loadMultiple($release_ids);

      foreach ($releases as $release) {
        if ($connector->drupalOrgParseRelease($release)) {
          $success++;
        }
        else {
          $failed++;
        }
        $offset++;
      }
    } while ($success < $goal && count($releases) > 0);

    \Drupal::logger('l10n_drupal')->notice('Parsed @success releases successfully, @fails failed parsing.', [
      '%success' => $success,
      '%fails'   => $failed,
    ]);
  }

}

/**
 * Implementation of hook_l10n_server_connector_info().
 */
function l10n_drupal_rest_l10n_server_connector_info() {
  $connectors['l10n_drupal_rest'] = array(
    'title'    => t('Drupal.org packages'),
    'sources'  => array('restapi'),
    'file'     => drupal_get_path('module', 'l10n_drupal_rest') . '/l10n_drupal_rest.connector.inc',
    // Display warnings tab, because we are parsing source code here.
    'warnings' => TRUE,
  );

  return $connectors;
}

/**
 * Implementation of hook_l10n_server_source_info().
 */
function l10n_drupal_rest_l10n_server_source_info() {
  return array(
    'restapi' => array(
      'title' => t('the drupal.org REST API'),
      // Reuse file settings mostly (will be modified in form_alter()).
      'form'  => 'l10n_server_connectors_files_settings_form',
      'file'  => drupal_get_path('module', 'l10n_server') . '/l10n_server.connectors.inc',
    ),
  );
}

// = Settings ==================================================================

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function l10n_drupal_rest_form_l10n_server_connectors_files_settings_form_alter(&$form) {
  if ($form['#connector_name'] == 'l10n_drupal_rest') {
    // No file directory setting here.
    $form['l10n_server_connector_l10n_drupal_rest_restapi_directory']['#access'] = FALSE;
    unset($form['l10n_server_connector_l10n_drupal_rest_restapi_directory']['#after_build']);
    // Setting for filesize limit
    $form['l10n_server_connector_l10n_project_drupalorg_max_filesize'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Release files max filesize'),
      '#default_value' => variable_get('l10n_server_connector_l10n_project_drupalorg_max_filesize', 50 * 1024 * 1024),
      '#description'   => t('In bytes. Releases larger than this size will not be downloaded.'),
      '#weight'        => 0,
    );
    $form['l10n_drupal_rest_refresh_url'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Refresh URL'),
      '#default_value' => variable_get('l10n_drupal_rest_refresh_url', L10N_DRUPAL_REST_REFRESH_URL),
      '#description'   => t('URL to the releases.tsv file.'),
      '#weight'        => 1,
    );
    $form['l10n_drupal_rest_last_sync'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Sync releases after'),
      '#default_value' => variable_get('l10n_drupal_rest_last_sync', 0),
      '#description'   => t('UNIX timestamp to parse releases from.'),
      '#weight'        => 2,
    );
  }
}

/**
 * Implementation of hook_l10n_packager_done().
 */
function l10n_drupal_rest_l10n_packager_done($file) {
  if (function_exists('drupalorg_crosssite_fastly_purge_url')) {
    $download_base = variable_get('l10n_packager_update_url', file_create_url(l10n_packager_directory()));
    $file_path = preg_replace('%^' . preg_quote(l10n_packager_directory(), '%') . '%', '', $file->uri);
    drupalorg_crosssite_fastly_purge_url($download_base . $file_path);

    // “all” is an alias for “8.x”, clear it too, if applicable.
    $alternate_file_path = preg_replace('%^/8\.x%', '/all', $file_path);
    if ($alternate_file_path !== $file_path) {
      drupalorg_crosssite_fastly_purge_url($download_base . $alternate_file_path);
    }
    // And vice versa, for core only.
    $alternate_file_path = preg_replace('%^/all/drupal/%', '/8.x/drupal/', $file_path);
    if ($alternate_file_path !== $file_path) {
      drupalorg_crosssite_fastly_purge_url($download_base . $alternate_file_path);
    }
  }
}
